{"version":3,"sources":["components/LocationMark.js","components/LocationInfoBox.js","components/Map.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMark","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","index","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAYeA,EARM,SAAC,GAAwB,EAAvBC,IAAuB,EAAlBC,IAAmB,IAAdC,EAAa,EAAbA,QAC7B,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCQjCG,EAbS,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACtB,OACI,sBAAKJ,UAAU,gBAAf,UACI,sDACA,+BACI,qCAAO,iCAASI,EAAKC,QACrB,wCAAU,iCAASD,EAAKE,kBCDlCC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC9B,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAUN,EAAUO,KAAI,SAACC,EAAIC,GAC/B,OAA2B,IAAxBD,EAAGE,WAAW,GAAGb,GACT,cAAC,EAAD,CAA4BR,IAAKmB,EAAGG,WAAW,GAAGC,YAAY,GAAItB,IAAKkB,EAAGG,WAAW,GAAGC,YAAY,GAAIrB,QAAS,kBAAMc,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,UAAzIW,GAEzB,QAGX,OACI,sBAAKjB,UAAU,MAAf,UACI,cAAC,IAAD,CACIqB,iBAAkB,CAAEC,IAAK,IACzBC,cAAgBd,EAChBe,YAAcd,EAHlB,SAKKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAIkB,aAAe,CACfhB,OAAQ,CACJZ,IAAK,QACLC,KAAM,UAEVY,KAAM,GAGKH,QC5BAmB,EARA,WACX,OACI,wBAAQ1B,UAAU,SAAlB,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,4CCuBGyB,MAzBf,WACE,MAAkChB,mBAAS,IAA3C,mBAAOH,EAAP,KAAkBoB,EAAlB,KACA,EAA8BjB,oBAAS,GAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,6CAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,KACC,IAGD,gCACE,cAAC,EAAD,IACGR,EAA0C,6CAAhC,cAAC,EAAD,CAAKrB,UAAWA,QCZlB8B,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDhBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.92ea1802.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Icon} from '@iconify/react'\r\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\"\r\n\r\nconst LocationMark = ({lat, lng, onClick}) => {\r\n    return (\r\n        <div className='location-marker' onClick={onClick}>\r\n            <Icon icon={locationIcon} className=\"location-icon\" />\r\n            \r\n        </div> \r\n        )}\r\n\r\nexport default LocationMark","import React from 'react'\r\n\r\nconst LocationInfoBox = ({info}) => {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <h2> Event Location Info</h2>\r\n            <ul>\r\n                <li>ID:<strong>{info.id}</strong></li>\r\n                <li>TITLE:<strong>{info.title}</strong></li>\r\n            </ul>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationInfoBox\r\n","import { useState } from 'react'\r\nimport GoogleMapReact from 'google-map-react'\r\nimport LocationMarker from './LocationMark'\r\nimport LocationInfoBox from './LocationInfoBox'\r\n\r\n\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const markers = eventData.map((ev, index) => {\r\n        if(ev.categories[0].id === 8) {\r\n            return <LocationMarker key={index} lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick={() => setLocationInfo({ id: ev.id, title: ev.title })} />\r\n        }\r\n        return null\r\n    })\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: '' }}\r\n                defaultCenter={ center }\r\n                defaultZoom={ zoom }\r\n            >\r\n                {markers}\r\n            </GoogleMapReact>\r\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nMap.defaultProps = {\r\n    center: {\r\n        lat: 42.3265,\r\n        lng: -122.8756\r\n    },\r\n    zoom: 6\r\n}\r\n\r\nexport default Map","import { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1><Icon icon={locationIcon} /> Wildfire Tracker (Powered By NASA)</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\r\nimport Map from './components/Map'\r\nimport Header from './components/Header'\r\n\r\nfunction App() {\r\n  const [eventData, setEventData] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      setLoading(true)\r\n      const res = await fetch('https://eonet.gsfc.nasa.gov/api/v3/events')\r\n      const { events } = await res.json()\r\n\r\n      setEventData(events)\r\n      setLoading(false)\r\n    }\r\n\r\n    fetchEvents()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      { !loading ? <Map eventData={eventData} /> : <h1> ...Loading</h1> }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}